import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:roomality/database/room_db.dart';
import 'package:roomality/models/room.dart';

class DatabaseViewerFragment extends StatefulWidget {
  const DatabaseViewerFragment({super.key});

  @override
  State<DatabaseViewerFragment> createState() => _DatabaseViewerFragmentState();
}

class _DatabaseViewerFragmentState extends State<DatabaseViewerFragment> {
  String _outputText = "‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•";
  bool _isLoading = false;

  Future<void> _showAllData() async {
    setState(() {
      _isLoading = true;
      _outputText = "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...";
    });
    try {
      final roomDB = RoomDB(dbName: "rooms.db");
      final rooms = await roomDB.loadAllData();
      final horPukList = await roomDB.loadAllHorPuk();
      final buffer = StringBuffer();
      buffer.writeln("=== üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ===");
      if (rooms.isEmpty) {
        buffer.writeln("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
      } else {
        buffer.writeln("üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${rooms.length} ‡∏´‡πâ‡∏≠‡∏á\n");
        for (int i = 0; i < rooms.length; i++) {
          final room = rooms[i];
          buffer.writeln("üè† ‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà ${i + 1}:");
          buffer.writeln("   ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á: ${room.roomName}");
          buffer.writeln("   ‡∏£‡∏≤‡∏Ñ‡∏≤/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô: ${room.monthlyPrice} ‡∏ö‡∏≤‡∏ó");
          buffer.writeln("   ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${_getStatusText(room.roomStatus)}");
          buffer.writeln("   ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á: ${room.timeStamp}");
          buffer.writeln("   ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ");
        }
      }
      buffer.writeln("\n=== üè¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ===");
      if (horPukList.isEmpty) {
        buffer.writeln("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏≠‡∏û‡∏±‡∏Å‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
      } else {
        buffer.writeln("üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${horPukList.length} ‡∏´‡∏≠‡∏û‡∏±‡∏Å\n");
        for (int i = 0; i < horPukList.length; i++) {
          final horPuk = horPukList[i];
          buffer.writeln("üè¢ ‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏ó‡∏µ‡πà ${i + 1}: ${horPuk.horPukName}");
          buffer.writeln("   ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß: ${horPuk.rows.length} ‡πÅ‡∏ñ‡∏ß");
          int totalFloors = 0;
          int totalRooms = 0;
          for (int j = 0; j < horPuk.rows.length; j++) {
            final row = horPuk.rows[j];
            buffer.writeln("   ‚îî‚îÄ ‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà ${j + 1}: ${row.rowName}");
            buffer.writeln("      ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏±‡πâ‡∏ô: ${row.floor.length} ‡∏ä‡∏±‡πâ‡∏ô");
            for (int k = 0; k < row.floor.length; k++) {
              final floor = row.floor[k];
              buffer.writeln("      ‚îî‚îÄ ‡∏ä‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà ${k + 1}: ${floor.floorName}");
              buffer.writeln("         ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡πâ‡∏≠‡∏á: ${floor.rooms.length} ‡∏´‡πâ‡∏≠‡∏á");
              for (int l = 0; l < floor.rooms.length; l++) {
                final room = floor.rooms[l];
                buffer.writeln("         ‚îî‚îÄ ‡∏´‡πâ‡∏≠‡∏á ${l + 1}: ${room.roomName}");
                buffer.writeln(
                  "            ‡∏£‡∏≤‡∏Ñ‡∏≤/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô: ${room.monthlyPrice} ‡∏ö‡∏≤‡∏ó",
                );
                buffer.writeln(
                  "            ‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô: ${room.depositPrice} ‡∏ö‡∏≤‡∏ó",
                );
                buffer.writeln("            ‡∏™‡∏±‡∏ç‡∏ç‡∏≤: ${room.contract} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô");
                buffer.writeln(
                  "            ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${_getStatusText(room.paymentStatus)}",
                );
              }
              totalRooms += floor.rooms.length;
            }
            totalFloors += row.floor.length;
          }
          buffer.writeln("   üìä ‡∏™‡∏£‡∏∏‡∏õ: ${totalFloors} ‡∏ä‡∏±‡πâ‡∏ô, ${totalRooms} ‡∏´‡πâ‡∏≠‡∏á");
          buffer.writeln("   ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ");
        }
      }
      setState(() {
        _outputText = buffer.toString();
        _isLoading = false;
      });
    } catch (e) {
      setState(() {
        _outputText = "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $e";
        _isLoading = false;
      });
    }
  }

  String _getStatusText(PaymentStatus status) {
    switch (status) {
      case PaymentStatus.noTenant:
        return "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤";
      case PaymentStatus.complete:
        return "‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß";
      case PaymentStatus.overDue:
        return "‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î";
      case PaymentStatus.pending:
        return "‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô";
      default:
        return "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞";
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', style: GoogleFonts.prompt()),
        backgroundColor: const Color.fromARGB(255, 157, 139, 167),
        foregroundColor: Colors.white,
      ),
      body: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: [Color(0xFFA695AF), Color(0xff9e8da9)],
          ),
        ),
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            children: [
              ElevatedButton.icon(
                onPressed: _isLoading ? null : _showAllData,
                icon: const Icon(Icons.refresh),
                label: Text('‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', style: GoogleFonts.prompt()),
                style: ElevatedButton.styleFrom(
                  backgroundColor: const Color.fromARGB(255, 96, 90, 138),
                  foregroundColor: Colors.white,
                  padding: const EdgeInsets.symmetric(vertical: 12),
                ),
              ),
              const SizedBox(height: 16),
              if (_isLoading)
                const CircularProgressIndicator(
                  valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                ),
              const SizedBox(height: 16),
              Expanded(
                child: Container(
                  width: double.infinity,
                  decoration: BoxDecoration(
                    color: Colors.white.withOpacity(0.9),
                    borderRadius: BorderRadius.circular(12),
                    border: Border.all(
                      color: const Color.fromARGB(255, 96, 90, 138),
                    ),
                  ),
                  child: Padding(
                    padding: const EdgeInsets.all(16.0),
                    child: SingleChildScrollView(
                      child: SelectableText(
                        _outputText,
                        style: GoogleFonts.prompt(fontSize: 14, height: 1.5),
                      ),
                    ),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
